# Generated by Django 4.2.2 on 2023-08-03 14:26

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Natal_First_Time_Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('S_No', models.IntegerField(default=0, verbose_name='Serial No.')),
                ('name', models.CharField(db_column='Name ', default='', max_length=100, verbose_name='Name')),
                ('gender', models.CharField(db_column='gender', default='', max_length=100, verbose_name='gender')),
                ('father_name', models.CharField(db_column='father name', default='', max_length=100, verbose_name='father name')),
                ('mother_name', models.CharField(db_column='mother name', default='', max_length=100, verbose_name='mother name')),
                ('dob', models.CharField(db_column='dob', default='', max_length=50, verbose_name='dob')),
                ('time', models.CharField(db_column='time ', default='', max_length=100, verbose_name='time')),
                ('location_search_input_lord', models.CharField(db_column='location-search-input', default='', max_length=200, verbose_name='location-search-input')),
                ('timezone', models.CharField(db_column='Time Zone', default='', max_length=100, verbose_name='Time Zone')),
                ('dst', models.CharField(db_column='DST', default='', max_length=100, verbose_name='DST')),
                ('date1', models.CharField(db_column='BTR Date and Time', default='', max_length=100, verbose_name='BTR Date and Time')),
                ('currentaddress', models.CharField(db_column='BTR Place', default='', max_length=200, verbose_name='BTR Place')),
            ],
            options={
                'verbose_name': '100. Table Name: Natal First Time Table (Table Code:100)',
                'verbose_name_plural': '100. Table Name:  Natal First Time Table (Table Code:100)',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
